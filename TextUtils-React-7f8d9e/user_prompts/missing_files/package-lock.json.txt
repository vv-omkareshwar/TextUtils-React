
    You are provided with the following details for a code conversion task:
    
    - **File Path**: TextUtils-React-7f8d9e/package-lock.json
    - **Generated Directory Structure**: 
    ```
    
    ```
    - **File Summaries**: 
    ```
    {'TextUtils-React-7f8d9e/public/index.html': 'Summary: This HTML file serves as the main entry point for a React application called TextUtils. It includes meta tags for SEO and viewport settings, links to favicon and manifest files, and incorporates Bootstrap 5.3.0 for styling. The file sets up the basic structure for a single-page application with a root div where React components will be rendered. It also includes necessary scripts for Bootstrap functionality. The page title and description provide information about the TextUtils application\'s features, such as word counting, character counting, and text case conversion.\nDependencies: {\n  "Libraries": ["Bootstrap 5.3.0"]\n}', 'TextUtils-React-7f8d9e/src/components/Navbar.jsx': 'Summary: This file defines a Navbar component for a React application. It imports React, PropTypes, and Link from react-router-dom. The component renders a responsive navigation bar with a dynamic appearance based on the current mode (light, dark, or purple). It includes a brand link, navigation links, and a toggle group for switching between different modes. The component uses prop-types for type-checking and defines default props. Key functions include getNavStyle for conditional styling and the main Navbar functional component that renders the navigation structure.\nDependencies: {\n  "dependencies": {\n    "react": "^18.2.0",\n    "react-router-dom": "^6.11.2",\n    "prop-types": "^15.8.1"\n  }\n}', 'TextUtils-React-7f8d9e/src/components/TextForm.jsx': 'Summary: This file contains a React functional component called TextForm. It imports React and useState from \'react\'. The component provides various text manipulation functionalities such as converting text to uppercase/lowercase, speaking the text, undoing changes, clearing text, replacing words, copying text, and removing extra spaces. It uses React hooks (useState) for state management. The component renders a textarea for input, multiple buttons for different text operations, and a preview section. It also includes conditional styling based on the \'mode\' prop. The component uses the Web Speech API for text-to-speech functionality. It takes props for mode and showAlert function to display notifications.\nDependencies: {\n  "dependencies": {\n    "react": "^18.2.0"\n  }\n}', 'TextUtils-React-7f8d9e/src/App.css': 'Summary: This CSS file defines styles for a React application. It includes styles for the main App component, a logo animation, header, and a link. The file contains:\n\n1. App container styles (.App)\n2. Logo styles and animation (.App-logo)\n3. Header styles (.App-header)\n4. Link styles (.App-link)\n5. Keyframe animation for logo rotation (App-logo-spin)\n6. A custom class (.blank) for blue text color\n\nThe file uses flexbox for layout, media queries for responsive design, and keyframe animations for the logo. It sets up the basic visual structure and appearance of the React application.\nDependencies: {\n  "dependencies": null,\n  "Libraries": null,\n  "Scripts": null,\n  "Others": null\n}', 'TextUtils-React-7f8d9e/src/components/About.jsx': 'Summary: This file exports a React functional component named \'About\'. It imports React from \'react\'. The component renders an \'About Us\' section with an accordion structure, containing information about text analysis, free usage, and browser compatibility. It uses a \'getBkgStyle\' function to determine the background style based on the \'mode\' prop. The component uses Bootstrap classes for styling and responsiveness. The accordion items\' content and appearance change dynamically based on the \'mode\' prop. The component is exported as the default export.\nDependencies: {\n  "dependencies": {\n    "react": "^18.2.0"\n  }\n}', 'TextUtils-React-7f8d9e/public/manifest.json': 'Summary: This manifest.json file is a configuration file for a Progressive Web Application (PWA). It defines metadata for the application, including its name, icons, and display properties. The file specifies a short name and full name for the app, defines three icons of different sizes, sets the start URL to the root directory, and configures the app to run in standalone mode with specific theme and background colors. This configuration helps browsers and operating systems treat the web app more like a native application, enabling features such as home screen installation and custom splash screens.\nDependencies: {\n  "dependencies": null,\n  "Libraries": null,\n  "Scripts": null,\n  "Others": null\n}', 'TextUtils-React-7f8d9e/public/robots.txt': 'Summary: This robots.txt file is a standard configuration file used to provide instructions to web crawlers and other automated agents about how to interact with the website. The file contains the following directives:\n\n1. A comment line referencing the official robots.txt protocol documentation.\n2. A "User-agent: *" directive, which applies the following rules to all web robots.\n3. An empty "Disallow:" directive, indicating that no restrictions are placed on web robots, allowing them to crawl the entire website.\n\nThis configuration essentially allows all web robots to access and index all parts of the website without any restrictions.\nDependencies: {\n  "dependencies": null,\n  "Libraries": null,\n  "Scripts": null,\n  "Others": null\n}', 'TextUtils-React-7f8d9e/src/reportWebVitals.js': 'Summary: This file, reportWebVitals.js, is a utility module for measuring and reporting web vitals metrics in a React application. It imports the web-vitals library dynamically and uses it to measure Core Web Vitals. The main function, reportWebVitals, takes a callback function as an argument and calls it with the performance metrics. The module exports this function as the default export. It uses dynamic import for better performance and code splitting. The file is crucial for monitoring the application\'s performance and user experience.\nDependencies: {\n  "dependencies": {\n    "web-vitals": "^3.3.1"\n  }\n}', 'TextUtils-React-7f8d9e/package.json': 'Summary: This package.json file defines the configuration and dependencies for a React project named "textutils". It specifies the project\'s homepage, version, and privacy settings. The file lists various dependencies required for development and testing, including React, React DOM, React Router, and testing libraries. It also defines scripts for running, building, and deploying the application. The file includes ESLint configuration and browser compatibility settings. The dependencies section lists all the required packages with their versions, while the devDependencies section includes the gh-pages package for GitHub Pages deployment. The file structure follows the standard npm package.json format, making it compatible with Node.js and npm ecosystem.\nDependencies: {\n  "dependencies": {\n    "@testing-library/jest-dom": "^5.16.5",\n    "@testing-library/react": "^14.0.0",\n    "@testing-library/user-event": "^14.4.3",\n    "react": "^18.2.0",\n    "react-dom": "^18.2.0",\n    "react-router-dom": "^6.11.2",\n    "react-scripts": "5.0.1",\n    "web-vitals": "^3.3.1"\n  },\n  "devDependencies": {\n    "gh-pages": "^5.0.0"\n  }\n}', 'TextUtils-React-7f8d9e/src/components/Alert.jsx': 'Summary: This file contains the Alert component for a React application. It imports React and defines a functional component named Alert that takes a prop \'alert\'. The component includes a helper function \'capitalize\' to format the alert type. The Alert component renders a div with a fixed height of 50px, and conditionally renders an alert message if the \'alert\' prop is truthy. The alert uses Bootstrap classes for styling and displays the capitalized alert type and message. The component is exported as the default export for use in other parts of the application.\n\nFunctions:\n- capitalize(msg: string): string - Capitalizes the first letter of the input string\n- Alert({ alert }): JSX.Element - The main component function that renders the alert\n\nProps:\n- alert: { type: string, msg: string } | null - The alert object containing type and message, or null if no alert\n\nThe component uses React\'s latest functional component syntax and destructuring for props.\nDependencies: {\n  "dependencies": {\n    "react": "^18.2.0"\n  }\n}', 'TextUtils-React-7f8d9e/src/index.css': 'Summary: This CSS file contains a single rule that applies to the pseudo-element ::after of elements with the class "accordion-button". The rule inverts the colors of the pseudo-element using the filter property. This is commonly used to change the color of icons or decorative elements in accordion buttons, especially when implementing dark mode or custom styling for accordion components. The file doesn\'t import any other styles or depend on external libraries.\nDependencies: {\n  "dependencies": null,\n  "Libraries": null,\n  "Scripts": null,\n  "Others": null\n}', 'TextUtils-React-7f8d9e/README.md': 'Summary: This README.md file provides an overview of a React application created using Create React App. It outlines the available scripts for running, testing, and building the application. The file also includes links to various sections of the Create React App documentation for further learning and troubleshooting. The content is structured using Markdown syntax, with headings, code blocks, and hyperlinks to relevant resources. No specific functions, classes, or variables are defined in this documentation file.\nDependencies: {\n  "dependencies": null,\n  "Libraries": null,\n  "Scripts": null,\n  "Others": null\n}', 'TextUtils-React-7f8d9e/tests/setupTests.js': 'Summary: This file (setupTests.js) is a configuration file for Jest testing in a React application. It imports the \'@testing-library/jest-dom\' library, which extends Jest with custom matchers for asserting on DOM nodes. This setup allows developers to use additional expect assertions in their tests, such as toHaveTextContent, toBeInTheDocument, and other DOM-specific matchers. The file doesn\'t contain any custom functions or classes; it simply imports the necessary testing utilities to enhance the testing capabilities of the application.\nDependencies: {\n  "dependencies": {\n    "@testing-library/jest-dom": "^5.16.5"\n  }\n}', 'TextUtils-React-7f8d9e/package-lock.json': 'Summary: \nDependencies: ', 'TextUtils-React-7f8d9e/src/App.jsx': 'Summary: This App.jsx file is the main component of a React application called TextUtils. It imports necessary components and uses React Router for navigation. The file manages the application\'s state for theme mode and alerts. It defines functions to toggle between different color modes (purple, light, dark) and to show alerts. The component renders a Navbar, Alert, and either an About or TextForm component based on the current route. The file uses React hooks (useState) for state management and React Router\'s BrowserRouter, Routes, and Route for routing. The component structure allows for easy theme switching and displaying alerts across the application.\nDependencies: {\n  "dependencies": {\n    "react": "^18.2.0",\n    "react-dom": "^18.2.0",\n    "react-router-dom": "^6.11.2"\n  }\n}', 'TextUtils-React-7f8d9e/tests/App.test.jsx': 'Summary: This file contains a test for the App component using React Testing Library and Jest. It imports the necessary testing utilities and the App component. The test renders the App component and checks if a text element containing "learn react" (case-insensitive) is present in the document. The file uses the following functions:\n\n1. render: Renders the App component for testing.\n2. screen.getByText: Searches for text content in the rendered component.\n3. expect: Assertion function from Jest to check if the element is in the document.\n\nThe test ensures that the App component renders correctly and contains the expected text.\nDependencies: {\n  "dependencies": {\n    "react": "^18.2.0",\n    "@testing-library/react": "^14.0.0",\n    "@testing-library/jest-dom": "^5.16.5"\n  }\n}', 'TextUtils-React-7f8d9e/src/index.jsx': 'Summary: This file serves as the entry point for the React application. It imports necessary dependencies including React, ReactDOM, CSS styles, the main App component, and a performance reporting function. The code uses the new ReactDOM.createRoot API to render the App component within React\'s StrictMode. This setup enables concurrent rendering features of React 18. The file also includes a call to reportWebVitals for performance monitoring. Key elements: imports (React, ReactDOM, App, styles, reportWebVitals), root creation, App rendering, and performance measurement initialization.\nDependencies: {\n  "dependencies": {\n    "react": "^18.2.0",\n    "react-dom": "^18.2.0"\n  }\n}'}
    ```

    Follow the instructions below to complete the conversion:

    <Role>You are a senior Software Engineer with 7+ years of experience. You have been tasked to convert the given file(s) into the target language while adhering to the organization's coding standards and maintaining compatibility with the provided directory structure and dependencies.</Role>
    
    <Instructions>
    1. **Identify Conversion Type**:
       - Determine if the conversion type is Independent or Dependent based on the provided context and dependencies.

    2. **Analyze the File**:
       - Examine the code in the current file at `TextUtils-React-7f8d9e/package-lock.json` and its summarized content to understand its logic and structure.

    3. **Follow the Procedure**:
       - Refer to the **Independent Conversion** or **Dependent Conversion** procedure as outlined in the system prompt, depending on the identified conversion type.

    4. **Use the Generated Directory Structure**:
       - Ensure that the converted file aligns with the above provided directory structure.
       - Include necessary adaptations to maintain the logical flow of the directory and its dependencies.

    5. **Swagger Documentation**:
       - If applicable, integrate Swagger documentation for backend API endpoints.

    6. **Adhere to Coding Standards**:
       - Follow the coding standards specified in `<Coding_Standards>` for the target language.

    7. **Output Requirements**:
       - Return the converted code using the output format guidelines:
       ```
       ```converted
       <converted_code>
       ```
       ```dependencies
       {
           "dependencies": [OPTIONAL],
           "Libraries": [OPTIONAL],
           "Scripts": [OPTIONAL],
           "Others": [OPTIONAL]
       }
       ```
       ```

    8. **Documentation**:
       - Provide inline comments for significant changes.
       - List new libraries, modules, or dependencies used in the conversion process.

    9. **Validation**:
       - Verify that the converted code maintains functionality and adheres to best practices.
    
    10. **Glossary & References**:
        - Refer to the Glossary provided in the system prompt for additional clarity on terms and requirements.
    </Instructions>

    Ensure your response adheres to the guidelines and is complete.
    